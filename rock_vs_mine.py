# -*- coding: utf-8 -*-
"""Rock vs Mine.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13oXBxFR_QVrG5qbbF8ziQFusM6_MD_PV

Importing the dependicies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and Data processing"""

sonar_data = pd.read_csv('./Copy of sonar data.csv',header=None)
sonar_data

sonar_data.describe()

sonar_data[60].value_counts()

#pour lorsque set data to predict , know avg of chaque cloumn ,attribute
sonar_data.groupby(60).mean( )

#separating featurs and output

X = sonar_data.drop(60,axis=1)
Y = sonar_data[60]

X

Y

"""Training and test data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.1,random_state=9,stratify=Y) # with 'stratify' , spliting operation based on number of Y {M,R}

"""Model Training ---> Logistic Regression

"""

model = LogisticRegression()
model.fit(X_train,Y_train)

#accuracy on trainig data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)
print('Accuracy on training data  :',training_data_accuracy)

#accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)
print('Accuracy on test data  :',test_data_accuracy)

"""Making a predictive System"""

input_data = (0.0635,0.0709,0.0453,0.0333,0.0185,0.1260,0.1015,0.1918,0.3362,0.3900,0.4674,0.5632,0.5506,0.4343,0.3052,0.3492,0.3975,0.3875,0.5280,0.7198,0.7702,0.8562,0.8688,0.9236,1.0000,0.9662,0.9822,0.7360,0.4158,0.2918,0.3280,0.3690,0.3450,0.2863,0.0864,0.3724,0.4649,0.3488,0.1817,0.1142,0.1220,0.2621,0.4461,0.4726,0.3263,0.1423,0.0390,0.0406,0.0311,0.0086,0.0154,0.0048,0.0025,0.0087,0.0072,0.0095,0.0086,0.0085,0.0040,0.0051)

#convert to numpy array
input_data_as_numpy = np.asarray(input_data)

#reshape  the np array
input_data_reshaped = input_data_as_numpy.reshape(1,-1)

prediction = model.predict(input_data_reshaped)


if (prediction[0]=='R') :
    print('the object is a Rock')
else :
   print('the object is a Mine')